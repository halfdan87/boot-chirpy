package main

import (
    "fmt"
    "net/http"
)

type apiConfig struct {
    fileserverHits int
}

func (conf *apiConfig) middlewareMetricsInc(next http.Handler) http.Handler {
    return http.HandlerFunc(func(resp http.ResponseWriter, req *http.Request) {
        conf.fileserverHits ++
        next.ServeHTTP(resp, req)
    })
}

func (conf *apiConfig) reset() {
    conf.fileserverHits = 0
}

func validateChirp(resp http.ResponseWriter, req *http.Request) {
    type parameters struct {
        Body string `json:"body"`
    }

    type returnVals struct {
        Error string `json:"error"`,
        Valid bool `json:"valid"`,
    }

    decoder := json.NewDecoder(r.Body)
    params := parameters{}
    err := decoder.Decoder(&params)
    if err != nil {
        respBody := returnVals{
            error: "Error marshalling json"
        }
        w.WriteHeader(500)
        return
    }

    if len(params.Body) > 140 {

    }
}

func main() {
    cfg := apiConfig{}

    serveMux := http.NewServeMux()

    serveMux.HandleFunc("GET /api/healthz", func(resp http.ResponseWriter, req *http.Request) {
        resp.Header()["Content-Type"] = []string{"text/plain; charset=utf-8"}
        resp.WriteHeader(200)
        resp.Write([]byte("OK"))
    })

    serveMux.HandleFunc("POST /api/healthz", func(resp http.ResponseWriter, req *http.Request) {
        resp.WriteHeader(405)
    })

    serveMux.HandleFunc("/api/reset", func(resp http.ResponseWriter, req *http.Request) {
        cfg.reset()
        resp.Header()["Content-Type"] = []string{"text/plain; charset=utf-8"}
        resp.WriteHeader(200)
        resp.Write([]byte("OK"))
    })

    serveMux.HandleFunc("GET /admin/metrics", func(resp http.ResponseWriter, req *http.Request) {
        resp.Header()["Content-Type"] = []string{"text/html"}
        resp.WriteHeader(200)
        resp.Write([]byte(fmt.Sprintf(`
            <html>
                <body>
                    <h1>Welcome, Chirpy Admin</h1>
                    <p>Chirpy has been visited %d times!</p>
                </body>
            </html>
        `, cfg.fileserverHits)))
    })

    serveMux.HandleFunc("POST /api/validate_chirp", func(resp http.ResponseWriter, req *http.Request) {
        resp.Header()["Content-Type"] = []string{"text/html"}
        resp.WriteHeader(200)
        resp.Write([]byte(fmt.Sprintf(`
            <html>
                <body>
                    <h1>Welcome, Chirpy Admin</h1>
                    <p>Chirpy has been visited %d times!</p>
                </body>
            </html>
        `, cfg.fileserverHits)))
    })

    serveMux.Handle("/*", http.StripPrefix("/app", cfg.middlewareMetricsInc(http.FileServer(http.Dir(".")))))

    server := http.Server{ 
        Addr: "0.0.0.0:8080",
        Handler: serveMux,
    }
    err := server.ListenAndServe()

    if err != nil {
        fmt.Println("Error: ", err)
    }

    fmt.Println("Hello, world!")
}
